# Code generated by font_to_py.py.
# Font: FredokaOne-Regular.ttf Char set:  .0123456789
# Cmd: ./font_to_py.py Fredoka_One/FredokaOne-Regular.ttf 30 fredoka_30.py -fx -c 1234567890. 
version = '0.33'

def height():
    return 30

def baseline():
    return 29

def max_width():
    return 23

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return True

def min_ch():
    return 32

def max_ch():
    return 63

_font =\
b'\x17\x00\x00\x40\x00\x07\xfc\x00\x1f\xfe\x00\x3f\xff\x00\x3f\xff'\
b'\x80\x7f\xff\xc0\x7f\xff\xc0\x7e\x0f\xc0\x7e\x0f\xc0\x3c\x07\xe0'\
b'\x00\x0f\xc0\x00\x1f\xc0\x00\x7f\xc0\x01\xff\x80\x01\xff\x00\x01'\
b'\xfe\x00\x01\xf8\x00\x01\xf8\x00\x01\xf0\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x01\xf0\x00\x03\xf8\x00\x03\xf8\x00\x03\xf8\x00'\
b'\x03\xf8\x00\x03\xf8\x00\x01\xf0\x00\x00\x00\x00\x17\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3e\x00\x00\x7f'\
b'\x00\x00\x7f\x00\x00\x7f\x00\x00\x7f\x00\x00\x7f\x00\x00\x3e\x00'\
b'\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\xff\x00\x03\xff\x80\x07'\
b'\xff\xe0\x0f\xff\xe0\x1f\xff\xf0\x1f\xff\xf0\x3f\xef\xf8\x3f\x83'\
b'\xf8\x3f\x81\xf8\x7f\x01\xfc\x7f\x01\xfc\x7f\x01\xfc\x7f\x01\xfc'\
b'\x7f\x01\xfc\x7f\x01\xfc\x7f\x01\xfc\x7f\x01\xfc\x7f\x01\xfc\x7f'\
b'\x01\xfc\x7f\x01\xfc\x3f\x83\xf8\x3f\xef\xf8\x3f\xff\xf8\x1f\xff'\
b'\xf0\x1f\xff\xf0\x0f\xff\xe0\x07\xff\xc0\x01\xff\x00\x00\x10\x00'\
b'\x17\x00\x00\x00\x00\x00\x78\x00\x00\xfc\x00\x01\xfc\x00\x03\xfc'\
b'\x00\x0f\xfc\x00\x1f\xfc\x00\x3f\xfc\x00\x7f\xfc\x00\x7f\xfc\x00'\
b'\x7f\xfc\x00\x7f\xfc\x00\x3f\xfc\x00\x19\xfc\x00\x01\xfc\x00\x01'\
b'\xfc\x00\x01\xfc\x00\x01\xfc\x00\x01\xfc\x00\x01\xfc\x00\x01\xfc'\
b'\x00\x01\xfc\x00\x01\xfc\x00\x01\xfc\x00\x01\xfc\x00\x01\xfc\x00'\
b'\x01\xfc\x00\x01\xfc\x00\x00\xf8\x00\x00\x00\x00\x17\x00\x00\x00'\
b'\x00\x01\xfe\x00\x07\xff\x80\x0f\xff\xc0\x1f\xff\xe0\x1f\xff\xf0'\
b'\x3f\xff\xf0\x3f\xff\xf8\x7f\x83\xf8\x7f\x03\xf8\x7f\x01\xf8\x7f'\
b'\x01\xf8\x7f\x03\xf8\x7e\x07\xf8\x00\x07\xf8\x00\x1f\xf0\x00\x3f'\
b'\xf0\x00\xff\xe0\x03\xff\xc0\x07\xff\x80\x0f\xff\x00\x1f\xfc\x00'\
b'\x3f\xff\xf0\x7f\xff\xfc\x7f\xff\xfc\x7f\xff\xfe\x7f\xff\xfe\x7f'\
b'\xff\xfc\x3f\xff\xfc\x00\x00\x00\x17\x00\x00\x00\x00\x01\xff\x00'\
b'\x07\xff\xc0\x0f\xff\xe0\x1f\xff\xf0\x1f\xff\xf0\x3f\xff\xf8\x3f'\
b'\xe7\xf8\x3f\x83\xf8\x1f\x01\xfc\x0e\x03\xf8\x00\x7f\xf8\x00\x7f'\
b'\xf8\x00\x7f\xf0\x00\x7f\xe0\x00\x7f\xf0\x00\x7f\xf8\x00\x3f\xfc'\
b'\x00\x01\xfc\x7e\x01\xfc\x7f\x01\xfc\x7f\x01\xfc\x7f\xc3\xfc\x3f'\
b'\xff\xfc\x3f\xff\xf8\x1f\xff\xf0\x0f\xff\xe0\x07\xff\xc0\x03\xff'\
b'\x00\x00\x10\x00\x17\x00\x00\x00\x00\x07\x81\xf0\x0f\xc3\xf8\x0f'\
b'\xe3\xf8\x0f\xe3\xf8\x1f\xc3\xf8\x1f\xc3\xf8\x1f\xc3\xf8\x1f\xc3'\
b'\xf8\x3f\x83\xf8\x3f\x83\xf8\x3f\x83\xf8\x3f\x83\xf8\x7f\x03\xf8'\
b'\x7f\x03\xf8\x7f\xff\xf8\x7f\xff\xf8\x7f\xff\xf8\x7f\xff\xf8\x7f'\
b'\xff\xf8\x3f\xff\xf8\x00\x03\xf8\x00\x03\xf8\x00\x03\xf8\x00\x03'\
b'\xf8\x00\x03\xf8\x00\x03\xf8\x00\x03\xf8\x00\x01\xf0\x00\x00\x00'\
b'\x17\x00\x00\x00\x00\x0f\xff\xc0\x1f\xff\xc0\x1f\xff\xe0\x1f\xff'\
b'\xe0\x3f\xff\xe0\x3f\xff\xc0\x3f\xff\x80\x3f\x80\x00\x3f\x80\x00'\
b'\x3f\x00\x00\x3f\xfc\x00\x7f\xfe\x00\x7f\xff\x80\x7f\xff\x80\x7f'\
b'\xff\xc0\x7f\xff\xe0\x3f\x1f\xe0\x0e\x0f\xe0\x00\x0f\xe0\x00\x0f'\
b'\xe0\x3c\x0f\xe0\x3f\x1f\xe0\x7f\xff\xe0\x7f\xff\xc0\x7f\xff\x80'\
b'\x3f\xff\x80\x1f\xff\x00\x07\xfc\x00\x00\x40\x00\x17\x00\x00\x00'\
b'\x00\x00\x07\xc0\x00\x3f\xe0\x00\xff\xf0\x01\xff\xf0\x03\xff\xf0'\
b'\x07\xff\xe0\x0f\xff\xc0\x1f\xf8\x00\x1f\xe0\x00\x3f\xc0\x00\x3f'\
b'\x80\x00\x3f\xb0\x00\x7f\xff\x00\x7f\xff\x80\x7f\xff\xc0\x7f\xff'\
b'\xe0\x7f\xff\xf0\x7f\xcf\xf0\x7f\x07\xf0\x7f\x03\xf0\x7f\x03\xf0'\
b'\x3f\x07\xf0\x3f\xff\xf0\x3f\xff\xe0\x1f\xff\xe0\x0f\xff\xc0\x07'\
b'\xff\x80\x03\xfe\x00\x00\x20\x00\x17\x00\x00\x00\x00\x3f\xff\xe0'\
b'\x7f\xff\xf0\x7f\xff\xf8\x7f\xff\xf8\x7f\xff\xf8\x7f\xff\xf8\x3f'\
b'\xff\xf0\x00\x0f\xf0\x00\x0f\xe0\x00\x1f\xe0\x00\x3f\xc0\x00\x3f'\
b'\xc0\x00\x7f\x80\x00\xff\x00\x00\xff\x00\x01\xfe\x00\x01\xfe\x00'\
b'\x03\xfc\x00\x03\xf8\x00\x03\xf8\x00\x07\xf0\x00\x07\xf0\x00\x07'\
b'\xf0\x00\x07\xe0\x00\x07\xe0\x00\x07\xe0\x00\x07\xe0\x00\x07\xe0'\
b'\x00\x00\x00\x00\x17\x00\x00\x00\x00\x01\xfe\x00\x07\xff\x80\x0f'\
b'\xff\xc0\x1f\xff\xe0\x1f\xff\xe0\x3f\xff\xf0\x3f\x87\xf0\x3f\x87'\
b'\xf0\x3f\x83\xf0\x3f\x87\xf0\x3f\xff\xf0\x1f\xff\xe0\x1f\xff\xe0'\
b'\x0f\xff\xe0\x1f\xff\xe0\x3f\xff\xf0\x7f\xcf\xf8\x7f\x03\xf8\x7f'\
b'\x03\xf8\x7f\x03\xf8\x7f\x03\xf8\x7f\x87\xf8\x3f\xff\xf8\x3f\xff'\
b'\xf0\x1f\xff\xe0\x0f\xff\xe0\x07\xff\x80\x03\xff\x00\x00\x10\x00'\
b'\x17\x00\x00\x00\x00\x03\xfe\x00\x07\xff\x00\x1f\xff\xc0\x1f\xff'\
b'\xc0\x3f\xff\xe0\x7f\xff\xe0\x7f\x07\xf0\x7f\x07\xf0\x7f\x07\xf0'\
b'\x7f\x07\xf0\x7f\x8f\xf0\x3f\xff\xf0\x3f\xff\xf0\x1f\xff\xf0\x0f'\
b'\xff\xf0\x07\xff\xf0\x00\xf7\xf0\x00\x0f\xe0\x00\x0f\xe0\x00\x1f'\
b'\xe0\x00\x7f\xc0\x0f\xff\x80\x3f\xff\x80\x3f\xff\x00\x3f\xfe\x00'\
b'\x3f\xfc\x00\x3f\xf0\x00\x1f\x80\x00\x00\x00\x00'

_index =\
b'\x00\x00\x5c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00'\
b'\x00\x00\x14\x01\x70\x01\xcc\x01\x28\x02\x84\x02\xe0\x02\x3c\x03'\
b'\x98\x03\xf4\x03\x50\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\xac\x04'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 32 + 1) if oc >= 32 and oc <= 63 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 30
    return _mvfont[doff + 2:next_offs], 30, width
 

# Code generated by font_to_py.py.
# Font: fa_solid.otf Char set: 
# Cmd: ./font_to_py.py fa_solid.otf 30 fa_30.py -x -k fa_list.txt
version = '0.33'

def height():
    return 30

def baseline():
    return 26

def max_width():
    return 38

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 61956

def max_ch():
    return 63562

_font =\
b'\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x7f\xfc\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c'\
b'\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c'\
b'\x60\x0c\x60\x0c\x7f\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x7f\xfc\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c'\
b'\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c\x60\x0c'\
b'\x60\x0c\x7f\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xfe'\
b'\x00\x00\x01\xff\xff\xe0\x00\x07\xff\xff\xf8\x00\x0f\xff\xff\xfc'\
b'\x00\x1f\x87\xf0\xfe\x00\x3e\x01\xf8\x1f\x00\x7c\x00\x78\x0f\x00'\
b'\x78\x00\x7c\x07\x80\xf0\x00\x3c\x07\x80\xf0\x00\x3c\x03\xc0\xf0'\
b'\x00\x1c\x03\xc0\xf0\x00\x1c\x03\xc0\xf0\x00\x1c\x03\xc0\xf0\x00'\
b'\x1c\x03\xc0\xf0\x00\x3c\x07\x80\x78\x00\x3c\x07\x80\x78\x00\x78'\
b'\x0f\x80\x3c\x00\xf8\x1f\x00\x3f\x03\xf0\x3e\x00\x1f\xff\xff\xfe'\
b'\x00\x0f\xff\xff\xfc\x00\x03\xff\xff\xf0\x00\x00\xff\xff\xc0\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x1f\xfe\x00\x00\x01\xff\xff\xe0\x00\x07'\
b'\xff\xff\xf8\x00\x0f\xff\xff\xfc\x00\x1f\xff\xf8\xfe\x00\x3f\xff'\
b'\xc0\x1f\x00\x7f\xff\x80\x0f\x00\x7f\xff\x00\x07\x80\xff\xff\x00'\
b'\x07\x80\xff\xfe\x00\x03\xc0\xff\xfe\x00\x03\xc0\xff\xfe\x00\x03'\
b'\xc0\xff\xfe\x00\x03\xc0\xff\xfe\x00\x03\xc0\xff\xff\x00\x07\x80'\
b'\x7f\xff\x00\x07\x80\x7f\xff\x80\x0f\x80\x3f\xff\xc0\x1f\x00\x3f'\
b'\xff\xe0\x3e\x00\x1f\xff\xff\xfe\x00\x0f\xff\xff\xfc\x00\x03\xff'\
b'\xff\xf0\x00\x00\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xfc\x00\x00\x00\x7f\xff'\
b'\x80\x00\x01\xff\xff\xc0\x00\x03\xff\x7f\xf0\x00\x07\xfe\x1f\xf8'\
b'\x00\x0f\xfe\x31\xfc\x00\x1f\xfe\x31\xfc\x00\x1e\x7f\xf1\xbe\x00'\
b'\x3e\x3f\xe3\x1f\x00\x7e\x3f\xe3\x1f\x00\x7e\x7f\xe3\x3f\x80\x7f'\
b'\xff\xc7\xff\x80\xff\xff\xc7\xff\x80\xff\xff\xc7\xff\x80\xff\xff'\
b'\x8f\xff\xc0\xff\xff\x8f\xff\xc0\xff\xff\x8f\xff\xc0\xf1\xfc\x1f'\
b'\xc3\xc0\xf1\xfc\x0f\xc3\xc0\xf1\xf8\x07\xe3\x80\xff\xf8\x07\xff'\
b'\x80\x7f\xf8\x0f\xff\x80\x7f\xff\xff\xff\x80\x7f\xff\xff\xff\x00'\
b'\x3f\xff\xff\xff\x00\x1f\xff\xff\xfe\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x26\x00\x00\x00\x03\x80\x00\x00\x00\x07\xc0\x00'\
b'\x00\x00\x07\xc0\x00\x00\x00\x07\xc0\x00\x00\x00\x07\x80\x00\x00'\
b'\x00\x10\x00\x00\x00\x00\x3c\x00\x00\x00\x00\x7e\x00\x00\x00\x01'\
b'\xff\x00\x00\x00\x03\xff\xf8\x00\x00\x07\xff\xfc\x00\x00\x0f\xf3'\
b'\xfc\x00\x00\x1f\xc1\xf8\x00\x00\x1f\x80\x00\x00\x00\x0f\xe0\x00'\
b'\x00\x0f\xe3\xf0\x1f\x80\x1f\xf1\xf8\x7f\xe0\x3f\xf8\x78\xff\xf0'\
b'\x7f\xfc\x79\xff\xf0\x78\x3c\x79\xe0\x78\xf0\x1e\x79\xe0\x78\xf0'\
b'\x1e\x79\xc0\x38\xf0\x1e\x7b\xc0\x38\xf0\x1e\x79\xc0\x38\xf0\x3e'\
b'\x79\xe0\x78\x7c\x7c\x71\xf0\xf8\x7f\xfc\x00\xff\xf0\x3f\xf8\x00'\
b'\x7f\xe0\x1f\xf0\x00\x3f\xc0\x03\x80\x00\x0f\x00'

_sparse =\
b'\x3f\x00\x3e\x00\x04\xf2\x7c\x00\x05\xf2\x14\x01\xfd\xf3\xac\x01'\
b'\x4a\xf8\x44\x02'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch))
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 30
    return _mvfont[doff + 2:next_offs], 30, width
 
